#include <iostream>
#include <gtest/gtest.h>
#include "big_int64.h"
#include "big_int_utils.h"
#include "tests_utils.h"
#include "prime_tests.h"
using namespace std;

TEST(BigInt64, subrtruction)
{
    BigInt64 x = 1;
    BigInt64 qx1 =
        "-174007514743726077132354985723240057142669064507747685822108418927241"
        "50"
        "3387030242049950893524535170780770845143926335354035422260044126367580"
        "89"
        "8974345305003914255609695981008730114770998920539691037870539399340182"
        "25"
        "8008846853015881988641235685286079856449284354072704779560310857850161"
        "39"
        "7435593726804508569137595227988103965414318480720248356793382440595795"
        "54"
        "7461880787096692640552985860891208826602003235375959617876874764535019"
        "84"
        "6482446369168986938697253790725177896160725194666658279881515706627115"
        "22"
        "9132043013384310819592935752605688639127035779013915065489351748196740"
        "84"
        "89954605800537288998091465316471093274";
    BigInt64 res = x - qx1;
    BigInt64 expected =
        "1740075147437260771323549857232400571426690645077476858221084189272415"
        "03"
        "3870302420499508935245351707807708451439263353540354222600441263675808"
        "98"
        "9743453050039142556096959810087301147709989205396910378705393993401822"
        "58"
        "0088468530158819886412356852860798564492843540727047795603108578501613"
        "97"
        "4355937268045085691375952279881039654143184807202483567933824405957955"
        "47"
        "4618807870966926405529858608912088266020032353759596178768747645350198"
        "46"
        "4824463691689869386972537907251778961607251946666582798815157066271152"
        "29"
        "1320430133843108195929357526056886391270357790139150654893517481967408"
        "48"
        "9954605800537288998091465316471093275";
    EXPECT_EQ(res, expected);
}

TEST(BigInt64, modinverse)
{
    BigInt64 e = 65537;
    BigInt64 phi =
        "1629132927679939416717592671334854803565586068663465726531931350176375"
        "20"
        "1067971567603947386988208783922768411171071462871059924093787415678878"
        "48"
        "2297381179148789795698949358195592218820993750772818792703077230651074"
        "94"
        "9017970886585979698511523300941973650302392673266121876863441812989432"
        "50"
        "0533786581941011156510082636665195654479741467280416651309700715618093"
        "25"
        "6287040163422277940560147766461021838430783719547752210970963063333085"
        "09"
        "6988583956603985285914560240393711968669349583266969098370699266460178"
        "68"
        "1660957566881082597666032916931288048924077692747850235282235074509972"
        "14"
        "58022142907116044152560051777938005708536";
    BigInt64 expected =
        "1102561329849032346446924719538369927786563383882377265279113830442695"
        "66"
        "3032619907983360275912461852115758580787672668327555302703142454415383"
        "31"
        "3301158808306230413330350791665887930078983731659636613387129216904920"
        "55"
        "3103484759809489960599052512168397993278794034362963970374003969869436"
        "94"
        "5979760594098167582218414106026337611712383127695127945316240681455130"
        "81"
        "6017751490126672197012447839138382327872178785980758984472986186598038"
        "61"
        "0126060894017320954139713519117791486616115040606423049409249664534152"
        "69"
        "6131805116521103156032153195867530557120077848911884116387815348502606"
        "23"
        "09063797953861559460192693235251267302385";

    BigInt64 actual = modularInverse(e, phi);

    EXPECT_EQ(expected, actual);
}
TEST(BigInt64, nextPrime2048Bits)
{
    START_TIMER
    BigInt64 b =
        "3003514512689078752777617106972715707740058008636568106129201242661473"
        "25"
        "4126863238061641209702863989839113536993862742577591036279436187162550"
        "94"
        "8204816947345475203362299270621169952430615592807469750738152395626544"
        "12"
        "4431698272094818783472531316715893553478893646732411183721350726518047"
        "26"
        "8284443739690756362970132049998720588717391089163753468857957634128003"
        "50"
        "1635015848000975601187322545883034914062679600414388362480641738695510"
        "27"
        "0856885610760292826677744856205971745953668557223887471125582697163126"
        "85"
        "2755773058081462455168639283946069446059258237142729010518173354856998"
        "37"
        "31335988469524786413211714629563695598330";
    BigInt64 nPrime = nextPrimeDivideToChunks(b, 40);
    END_TIMER("2048 bits")
}
TEST(BigInt64, tryDivision)
{
    BigInt64 n =
        "884763936463677901623347636348007730323881917830686476645711398"
        "985006448160326468436780589621713139326854846532529847387879918"
        "668625187101979501023450213367628350873291179429841178979480586"
        "906849009164918219944743861661541808740748947635713595352912907"
        "7591003033673372438625570303527281473035616591971";
    BigInt64 a =
        "845104736658978009287621723825060963259397155761567955187374793"
        "579250146519131433801742301619605234378399146748047149429975798"
        "758073482730706235003107650278473106606116149323566963023639926"
        "569960698133038529338083654072423421613443649554893422980187890"
        "108122594295841487006718125018608115980805082470";
    BigInt64 me = modularExponentiation(a, n - 1, n);
}

TEST(BigInt64, modularExponentiation)
{
    BigInt64 base =
        "8353043371615494085168234576539207328708483709958374728997751973300342"
        "28"
        "3303143638112088301290504120306160376905361691913217001283370499761185"
        "75"
        "2690983274997929713237557460592210345797430489521702331094010797588096"
        "45"
        "4001389577852443861118653027373456765533216693985859253994827025157304"
        "17"
        "88940813980383233972";
    BigInt64 exponent =
        "8383475880725673294565222216674484927222348837334381079633154659323692"
        "76"
        "4746282626949938787065973477080254073073496935569753501324064749896467"
        "80"
        "3550453302381801690847809386278589154149293674428196955859635085982080"
        "58"
        "3966391952641993405398689112636999156420560573899214685697990344424561"
        "23"
        "04000269825988560097";
    BigInt64 modulus =
        "1384799582626321342570643223726619489022593716164676201538324916125316"
        "35"
        "3029473196832341542779281774985198406891159801565711939828680595728852"
        "72"
        "1953197180781163746495975191587319380813606180580038265956768766874183"
        "30"
        "1990366951787419574778344978193559435918053730630525370182838047945637"
        "12"
        "646823358120276366211";

    BigInt64 res = modularExponentiation(base, exponent, modulus);
    BigInt64 actual =
        "1392304861637890400143661420650372471175650054179324534418461896174996"
        "71"
        "8091732826883524780616518023810644592533209313656119873385860675202207"
        "89"
        "1458769720427671160869650209580503289889767098709043593339073602639569"
        "39"
        "3689440273492592756956612938759440992385872331424453980249279481134214"
        "45"
        "0825918845022149419";
    EXPECT_EQ(res, actual);
}
TEST(BigInt64, Division1)
{
    BigInt64 a(
        "428194124537077593810686205532132186187392109694483768577"
        "3005078438059467530494444314064593408039");
    BigInt64 b("6543654365436536543654365436536436543654365436543653");
    BigInt64 expected("654365436534654365436543654365436436543654363");
    BigInt64 result = a / b;
    EXPECT_EQ(expected, result);
}

TEST(BigInt64, importAndExport)
{
    std::vector<uint8_t> input = {0, 1, 2,  3,  4,  5,  6,  7,
                                  8, 9, 10, 11, 12, 13, 14, 15};
    BigInt64 imported(input.data(), input.size(),
                      BigInt64::CreateModes::BIG_ENDIANESS);

    // Export to verify
    std::vector<uint8_t> output(input.size());
    imported.exportTo(output.data(), output.size(),
                      BigInt64::CreateModes::BIG_ENDIANESS);

    EXPECT_EQ(input, output);
}
TEST(BigInt64, ExtendedGcd)
{
    BigInt64 x, y;
    BigInt64 a = BigInt64("1234567890123456789012345678901234567890");
    BigInt64 b = BigInt64("9876543210987654321098765432109876543210");

    BigInt64 gcd = extendedGcd(a, b, x, y);

    // Assertions to verify the result
    EXPECT_EQ(
        gcd,
        BigInt64(
            "90000000009000000000900000000090"));  // gcd for these very large
                                                   // numbers, adjust

    EXPECT_EQ(a * x + b * y, gcd);  // a * x + b * y should be equal to gcd
}

TEST(BigInt64, Multiplication)
{
    BigInt64 a("-654365436534654365436543654365436436543654363");
    BigInt64 b("6543654365436536543654365436536436543654365436543653");
    BigInt64 expected(
        "-428194124537077593810686205532132186187392109694483768577"
        "3005078438059467530494444314064593408039");
    BigInt64 c = a * b;
    EXPECT_EQ(expected, c);
}
TEST(BigInt64, Division)
{
    BigInt64 a(
        "-6789678967896866666666666666666666666666666666666666666666667986789"
        "6");
    BigInt64 b("6543654365436536543654365436536436543654365436543653");

    BigInt64 expectedQuotient("-10375974323704851");
    BigInt64 expectedRemainder(
        "3063128871345561951750883478060436829516633906036460");

    BigInt64 quotient = a / b;
    BigInt64 remainder = a % b;

    EXPECT_EQ(expectedQuotient, quotient);
    EXPECT_EQ(expectedRemainder, remainder);
}
TEST(BigInt64, GCD)
{
    BigInt64 a(
        "58349054854737865786576953765376537896378965478653278964378956378"
        "95326879");
    BigInt64 b(
        "-5834905485473786578657695376537653789637896547865327896437895637"
        "895326879000");
    BigInt64 expected(
        "5834905485473786578657695376537653789637896547865327896437"
        "895637895326879");

    EXPECT_EQ(expected, gcd(a, b));
}
TEST(BigInt64, randomBits)
{
    BigInt64 a(BigInt64::CreateModes::RANDOM, 64);
    BigInt64 b(BigInt64::CreateModes::RANDOM, 1, 1);
    EXPECT_EQ(a.bitsCount(), 64);
    EXPECT_EQ(b, 1);
}
#ifndef SYCL_VERSION

TEST(BigInt64, karatzubaMultiplication)
{
    BigInt64 a(BigInt64::CreateModes::RANDOM, 4096);
    BigInt64 b(BigInt64::CreateModes::RANDOM, 4096);

    BigInt64 longMult = longMultiplication(a, b);
    START_TIMER
    BigInt64 karaMult = karatzubaMultiplication(a, b);
    END_TIMER("karatzuba multiplication")
    EXPECT_EQ(karaMult, longMult);
}
TEST(BigInt64, longMultiplication)
{
    BigInt64 a(BigInt64::CreateModes::RANDOM, 4096);
    BigInt64 b(BigInt64::CreateModes::RANDOM, 4096);
    START_TIMER
    BigInt64 longMult = longMultiplication(a, b);
    END_TIMER("long multiplication")

    BigInt64 karaMult = karatzubaMultiplication(a, b);

    EXPECT_EQ(karaMult, longMult);
}
#endif
TEST(BigInt64, ShiftByBitsCount)
{
    BigInt64 number(
        "12345678543543254325432254325432254325432543290123456789000");
    int bitsCount = number.bitsCount();
    BigInt64 resRight = number >> 4;
    BigInt64 expectedRight = number / 16;
    BigInt64 resLeft = number << 4;
    BigInt64 expectedLeft = number * 16;

    EXPECT_EQ(bitsCount - 4, resRight.bitsCount());
    EXPECT_EQ(bitsCount + 4, resLeft.bitsCount());

    EXPECT_EQ(resRight, expectedRight);
    EXPECT_EQ(resLeft, expectedLeft);
}
TEST(BigInt64, nextPrime2048)
{
    BigInt64 a =
        "2551032328529192654905725977424113999972308219602241627287332593727881"
        "00"
        "8487129540792877612376866404921491212130810702490769355959890232746255"
        "64"
        "4823188428836852946227365462574216311233573569721642355164575053064691"
        "59"
        "7517407847432633408873482217506572587346133054755576163503581047093132"
        "77"
        "7816432940705445616298203820304240359138077297514476299278007670407229"
        "49"
        "5510949568188373651184944564309264414727165089674658966368877317512742"
        "79"
        "3427909229741249835703823388333713541794058654254844938623222380672840"
        "75"
        "4335668392060665023359854704745733584649329902384174803168386407462014"
        "90"
        "26165096136526942001642396023299578308768";

    START_TIMER
    BigInt64 n = nextPrimeDivideToChunks(a, 1);
    END_TIMER("next prime 2048")
    BigInt64 realNext =
        "25510323285291926549057259774241139999723082196022416272"
        "87332593727881008487"
        "12954079287761237686640492149121213081070249076935595989"
        "02327462556448231884"
        "28836852946227365462574216311233573569721642355164575053"
        "06469159751740784743"
        "26334088734822175065725873461330547555761635035810470931"
        "32777816432940705445"
        "61629820382030424035913807729751447629927800767040722949"
        "55109495681883736511"
        "84944564309264414727165089674658966368877317512742793427"
        "90922974124983570382"
        "33883337135417940586542548449386232223806728407543356683"
        "92060665023359854704"
        "74573358464932990238417480316838640746201490261650961365"
        "26942001642396023299"
        "578311313";
    cout << "gap:" << n - a << endl;
    EXPECT_EQ(n, realNext);
}
TEST(BigInt64, nextPrime1024)
{
    BigInt64 a =
        "149850771096313008630641747195545090291042579671124986807081015"
        "821717840698748928973964882268170336697631753534109646521940731"
        "722420534581970385986561352391928703629650838089531469337149976"
        "703193673778860430276778398711828934956265846857601931063362118"
        "405758317713825532612790336772850247302677014935636940174";
    START_TIMER
    BigInt64 n = nextPrimeDivideToChunks(a, 40);
    END_TIMER("next prime 1024")
    BigInt64 realNext =
        "1498507710963130086306417471955450902910425796711249868070810158217178"
        "40"
        "6987489289739648822681703366976317535341096465219407317224205345819703"
        "85"
        "9865613523919287036296508380895314693371499767031936737788604302767783"
        "98"
        "7118289349562658468576019310633621184057583177138255326127903367728502"
        "47"
        "302677014935636941149";
    cout << "gap:" << n - a << endl;
    EXPECT_EQ(n, realNext);
}

int main(int argc, char **argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
